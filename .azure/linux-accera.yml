trigger: none
# no trigger by tag because packages built by this pipeline cannot be released to PyPI

pool:
  vmImage: "ubuntu-latest"

strategy:
  matrix:
    Python37:
      Python.Version: "3.7"
    Python38:
      Python.Version: "3.8"
    Python39:
      Python.Version: "3.9"
    Python310:
      Python.Version: "3.10"

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(Python.Version)
      addToPath: true
      architecture: "x64"

  - bash: |
      sudo apt-get install libunwind-dev ninja-build ccache python3-pip libvulkan-dev libomp-11-dev pkg-config -y
      sudo sysctl -w kernel.core_pattern="$(Build.SourcesDirectory)/build/core-%e-%s-%u-%g-%p-%t.dump"
      ulimit -c unlimited
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      echo "mkdir $HOME/.ccache"
      mkdir $HOME/.ccache
      echo "ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache"
      ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache
      conan remote add accera $(CONAN_REMOTE)
      conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
    displayName: Install prereqs for Linux
    env:
      CONAN_PWD: $(CONAN_PWD)

  - bash: |
      git submodule init
      git submodule update
      ./external/vcpkg/bootstrap-vcpkg.sh
      ./external/vcpkg/vcpkg install catch2 tomlplusplus
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  # set ACCERA_PACKAGE_FOR_CI="1" so that the package version will rev for the CI feed
  - bash: |
      echo "##vso[task.setvariable variable=ACCERA_PACKAGE_FOR_CI]1"
    displayName: Set ACCERA_PACKAGE_FOR_CI=1

  # Note: Code signing is not available for Linux distributions (outside of packages.microsoft.com)
  - task: PythonScript@0
    displayName: python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/"

  - task: PythonScript@0
    displayName: compilers python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/compilers/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/compilers"

  - task: PythonScript@0
    displayName: gpu python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/gpu/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/gpu"

  - task: PythonScript@0
    displayName: llvm python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/llvm/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/llvm"

  - bash: |
      python -m pip install build/dist/accera-*.whl --find-links=build/dist --no-index
      python -m pip install build/dist/accera_gpu*.whl
      python -m accera.test.smoke_test
    displayName: Smoke test
    workingDirectory: "$(Build.SourcesDirectory)/"

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build/dist"
      Contents: |
        **/*
      TargetFolder: "$(Build.StagingDirectory)/python"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts.$(Python.Version)"
      publishLocation: "pipeline"

  - bash:
      python -m pip install twine keyring artifacts-keyring
    displayName: pip install twine tool for python package publishing

  - task: TwineAuthenticate@1
    inputs:
      artifactFeed: 'Accera'

  - script: 'twine upload -r Accera --config-file $(PYPIRC_PATH) $(Build.SourcesDirectory)/build/dist/* --verbose --skip-existing'
    displayName: Upload the artifacts to Azure artifacts feed
