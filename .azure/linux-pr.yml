trigger: none

pool:
  vmImage: "ubuntu-latest"

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.9" # TODO: switch to 3.10 once onnxruntime is released for it
      addToPath: true
      architecture: "x64"

  - bash: |
      sudo apt-get install libunwind-dev ninja-build ccache python3-pip libvulkan-dev libomp-11-dev pkg-config -y
      sudo sysctl -w kernel.core_pattern="$(Build.SourcesDirectory)/build/core-%e-%s-%u-%g-%p-%t.dump"
      ulimit -c unlimited
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      echo "mkdir $HOME/.ccache"
      mkdir $HOME/.ccache
      echo "ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache"
      ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache
      conan remote add accera $(CONAN_REMOTE)
      conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
    displayName: Install prereqs for Linux
    continueOnError: false
    condition: eq( variables['Agent.OS'], 'Linux' )
    env:
      CONAN_PWD: $(CONAN_PWD)

  - bash: |
      git submodule init
      git submodule update
      ./external/vcpkg/bootstrap-vcpkg.sh
      ./external/vcpkg/vcpkg install catch2 tomlplusplus
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  - task: CMake@1
    displayName: CMake configure on Linux
    continueOnError: false
    inputs:
      cmakeArgs: ".. -DCMAKE_BUILD_TYPE=Debug -DLLVM_LIT_ARGS=-vv -GNinja -DLLVM_SETUP_VARIANT=$(LLVM_SETUP_VARIANT)"
    condition: eq( variables['Agent.OS'], 'Linux' )

  - task: CMake@1
    displayName: CMake default build
    continueOnError: false
    inputs:
      cmakeArgs: "--build . --config Debug"

  - task: CMake@1
    displayName: CMake build check-all
    inputs:
      cmakeArgs: "--build . --config Debug --target check-all"

  - task: CMake@1
    displayName: CMake install build
    inputs:
      cmakeArgs: "--build . --config Debug --target install"

  - task: PythonScript@0
    displayName: python ./setup.py build -g -b build -t build bdist_wheel -d build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/setup.py"
      arguments: "build -g -b build -t build bdist_wheel -d build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/"

  - bash: |
      python -m pip install -r $(Build.SourcesDirectory)/accera/onnx-emitter/test/requirements.txt
      ctest -C Debug -T test -VV -LE benchmark
    displayName: Run all ctest targets
    continueOnError: false
    workingDirectory: "$(Build.SourcesDirectory)/build"
    condition: eq( variables['Agent.OS'], 'Linux' )

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build"
      Contents: |
        **/*.mlir
        **/*.dump
      TargetFolder: "$(Build.StagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts"
      publishLocation: "pipeline"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: "**/Test*.xml"
      searchFolder: '$(Build.SourcesDirectory)/build'
