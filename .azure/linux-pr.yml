trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
 - name: PARALLEL
   value: 4 # 2 core CPU VMs (https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#hardware)
 - name: PIP_CACHE_DIR
   value: $(Pipeline.Workspace)/.pip
 - name: VCPKG_BINARY_SOURCES
   value: "clear;nuget,$(VCPKG_NUGET_FEED),readwrite"
 - name: VCPKG_ROOT
   value: "$(Build.SourcesDirectory)/external/vcpkg"

steps:
  - task: NuGetAuthenticate@0

  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.9" # TODO: switch to 3.10 once onnxruntime is released for it
      addToPath: true
      architecture: "x64"

  - task: Cache@2
    inputs:
      key: 'pip | "$(Agent.OS)" | $(Build.SourcesDirectory)/requirements.txt | $(Build.SourcesDirectory)/accera/onnx-emitter/test/requirements.txt'
      restoreKeys: |
        pip | "$(Agent.OS)"
      path: $(PIP_CACHE_DIR)
    displayName: Cache pip

  - bash: |
      sudo apt-get install libunwind-dev ninja-build ccache python3-pip libvulkan-dev libomp-11-dev pkg-config -y
      sudo sysctl -w kernel.core_pattern="$(Build.SourcesDirectory)/build/core-%e-%s-%u-%g-%p-%t.dump"
      ulimit -c unlimited
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      conan remote add accera $(CONAN_REMOTE)
      conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
      echo "##vso[task.prependpath]/usr/lib/ccache"
    displayName: Install prereqs for Linux
    continueOnError: false
    env:
      CONAN_PWD: $(CONAN_PWD)

  - bash: |
      git submodule init
      git submodule update
      ./external/vcpkg/bootstrap-vcpkg.sh
      ./external/vcpkg/vcpkg install catch2 tomlplusplus
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  - task: CMake@1
    displayName: CMake configure on Linux
    continueOnError: false
    inputs:
      cmakeArgs: ".. -DCMAKE_BUILD_TYPE=Debug -DLLVM_LIT_ARGS=-vv -GNinja -DLLVM_SETUP_VARIANT=$(LLVM_SETUP_VARIANT) -DSTRICT_MODE=ON"

  - task: CMake@1
    displayName: CMake default build
    continueOnError: false
    inputs:
      cmakeArgs: "--build . --config Debug --parallel"

  - task: CMake@1
    displayName: CMake build check-all
    inputs:
      cmakeArgs: "--build . --config Debug --target check-all --parallel"

  - task: CMake@1
    displayName: CMake install build
    inputs:
      cmakeArgs: "--build . --config Debug --target install --parallel"

  - task: PythonScript@0
    displayName: python ./setup.py build_ext -j $(PARALLEL) build -g -b build -t build bdist_wheel -d build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/setup.py"
      arguments: "build_ext -j $(PARALLEL) build -g -b build -t build bdist_wheel -d build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/"

  - bash: |
      python -m pip install -r $(Build.SourcesDirectory)/accera/onnx-emitter/test/requirements.txt
      python -m pip install pytest-azurepipelines
      ctest -C Debug -T test -VV -LE benchmark -j $(PARALLEL) --progress
    displayName: Run all ctest targets
    workingDirectory: "$(Build.SourcesDirectory)/build"

  - bash: python -m unittest discover accera/test dsl_tests.py
    displayName: Run tests in DEV_MODE
    workingDirectory: "$(Build.SourcesDirectory)/build/lib.linux-x86_64-3.9"

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build"
      Contents: |
        **/*.mlir
        **/*.dump
      TargetFolder: "$(Build.StagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts"
      publishLocation: "pipeline"

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: "**/Test*.xml"
      searchFolder: '$(Build.SourcesDirectory)/build'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: "**/test-*.xml"
      testRunTitle: 'Publish test results for Python'
      searchFolder: '$(Build.SourcesDirectory)/build'
