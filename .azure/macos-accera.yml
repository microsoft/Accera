schedules:
  - cron: "0 5 * * SUN"
    displayName: Weekly build
    branches:
      include:
        - main

trigger:
  tags:
    include:
    - "v*"

pool:
  vmImage: "macos-11"

strategy:
  matrix:
    Python37:
      Python.Version: "3.7"
    Python38:
      Python.Version: "3.8"
    Python39:
      Python.Version: "3.9"
    Python310:
      Python.Version: "3.10"

variables:
  VULKAN_CACHE_DIR: $(Pipeline.Workspace)/.vulkansdk

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(Python.Version)
      addToPath: true
      architecture: "x64"

  - bash: |
      brew install ccache ninja conan libomp
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      conan remote add accera $(CONAN_REMOTE)
      conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
      mkdir $HOME/.ccache
      ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache
    displayName: Install prereqs for macOS
    env:
      CONAN_PWD: $(CONAN_PWD)

  - bash: |
      git submodule init
      git submodule update
      ./external/vcpkg/bootstrap-vcpkg.sh
      ./external/vcpkg/vcpkg install catch2 tomlplusplus
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  # Begin Vulkan setup tasks
  # The Official Vulkan SDK setup requires elevation to install and cannot be run here. Instead we will build the Vulkan loader.
  # 1. Get the latest SDK version (https://vulkan.lunarg.com/content/view/latest-sdk-version-api)
  # 2. Build the Vulkan loader and headers if not present in the cache (https://github.com/KhronosGroup/Vulkan-Loader/blob/master/BUILD.md)
  # 3. Cache the Vulkan loader and headers using the version file as the hash
  - bash: |
      SDK_VERSION=`curl -L https://vulkan.lunarg.com/sdk/latest/mac.txt`
      echo Vulkan SDK version: $SDK_VERSION
      echo "##vso[task.setvariable variable=VULKAN_SDK_VERSION]$SDK_VERSION"
      echo $SDK_VERSION > vulkan.version
    displayName: Get Vulkan SDK version

  - task: Cache@2
    displayName: Cache Vulkan loader
    inputs:
      key: 'vulkan_sdk2 | "$(Agent.OS)" | vulkan.version | "$(Python.Version)"'
      path: $(VULKAN_CACHE_DIR)
      cacheHitVar: VULKAN_CACHE_RESTORED
    continueOnError: true

  - bash: |
      git clone https://github.com/KhronosGroup/Vulkan-Loader.git
      cd Vulkan-Loader
      git checkout tags/sdk-$VULKAN_SDK_VERSION
      mkdir build
      cd build
      python ../scripts/update_deps.py
      cmake -C helper.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$VULKAN_CACHE_DIR ..
      cmake --build . --config Release --target install
    displayName: Build Vulkan loader if not cached
    condition: ne(variables.VULKAN_CACHE_RESTORED, 'true')

  - bash: |
      cp -rf $(Build.SourcesDirectory)/Vulkan-Loader/build/Vulkan-Headers/build/install/include $(VULKAN_CACHE_DIR)
      echo "##vso[task.setvariable variable=VULKAN_SDK]$(VULKAN_CACHE_DIR)"
      ls -alR $VULKAN_CACHE_DIR
    displayName: Setup Vulkan SDK
  # End Vulkan setup tasks

  # set ACCERA_PACKAGE_FOR_CI="1" so that the package version will increment for PyPI repositories
  - bash: |
      echo "##vso[task.setvariable variable=ACCERA_PACKAGE_FOR_CI]1"
    displayName: Set ACCERA_PACKAGE_FOR_CI=1

  # Note: Code signing is not yet supported for OSX binaries (only Apple Store signing)
  - task: PythonScript@0
    displayName: python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/"

  - task: PythonScript@0
    displayName: compilers python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/compilers/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/compilers"

  - task: PythonScript@0
    displayName: gpu python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/gpu/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/gpu"

  - task: PythonScript@0
    displayName: llvm python ./setup.py build bdist_wheel -d $(Build.SourcesDirectory)/build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/accera/python/llvm/setup.py"
      arguments: "build bdist_wheel -d $(Build.SourcesDirectory)/build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/accera/python/llvm"

  # TODO: more gracefully handle missing dependencies
  - bash: |
      python -m pip install build/dist/accera-*.whl --find-links=build/dist --no-index
      python -m pip install build/dist/accera_gpu*.whl
      PYTHON_SITE_PACKAGES=`pip3 show accera | grep Location | awk '{ print $2 }'`
      DYLD_LIBRARY_PATH=$PYTHON_SITE_PACKAGES/accera:$VULKAN_SDK/lib python -m accera.test.smoke_test
    displayName: Smoke test
    workingDirectory: "$(Build.SourcesDirectory)/"

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build/dist"
      Contents: |
        **/*
      TargetFolder: "$(Build.StagingDirectory)/python"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts.$(Python.Version)"
      publishLocation: "pipeline"

  - bash:
      python -m pip install twine keyring artifacts-keyring
    displayName: pip install twine tool for python package publishing

  - task: TwineAuthenticate@1
    inputs:
      artifactFeed: 'Accera'

  - script: 'twine upload -r Accera --config-file $(PYPIRC_PATH) $(Build.SourcesDirectory)/build/dist/* --verbose --skip-existing'
    displayName: Upload the artifacts to Azure artifacts feed
