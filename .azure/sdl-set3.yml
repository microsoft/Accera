trigger: none

schedules:
  - cron: "0 7 * * SUN"
    displayName: Weekly build
    branches:
      include:
        - main

jobs:
  - job: "SDLTasks"
    timeoutInMinutes: 0

    pool:
      vmImage: windows-latest

    variables:
      VULKAN_CACHE_DIR: $(Pipeline.Workspace)/.vulkansdk
      LGTM.UploadSnapshot: true

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: "3.10"
        addToPath: true
        architecture: "x64"

    - task: PowerShell@2
      displayName: Install prereqs for Windows
      inputs:
        ignoreLASTEXITCODE: true
        errorActionPreference: silentlyContinue
        targetType: "inline"
        script: |
          python -m pip install -U pip
          python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
          conan remote add accera $(CONAN_REMOTE)
          conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
      continueOnError: false
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      env:
        CONAN_PWD: $(CONAN_PWD)

    - script: |
        git submodule init
        git submodule update
        call external\vcpkg\bootstrap-vcpkg.bat
        external\vcpkg\vcpkg.exe install catch2:x64-windows tomlplusplus:x64-windows
      displayName: Update vcpkg dependencies
      workingDirectory: "$(Build.SourcesDirectory)"
      
      # Begin Vulkan setup tasks
      # The Official Vulkan SDK setup requires elevation to install and cannot be run here. Instead we will build the Vulkan loader.
      # 1. Get the latest SDK version (https://vulkan.lunarg.com/content/view/latest-sdk-version-api)
      # 2. Build the Vulkan loader and headers if not present in the cache (https://github.com/KhronosGroup/Vulkan-Loader/blob/master/BUILD.md)
      # 3. Cache the Vulkan loader and headers using the version file as the hash
    - task: PowerShell@2
      displayName: Get Vulkan SDK version
      inputs:
        targetType: "inline"
        script: |
          $SDK_VERSION=(curl https://vulkan.lunarg.com/sdk/latest/windows.txt -UseBasicParsing).Content
          echo Vulkan SDK version: $SDK_VERSION
          echo "##vso[task.setvariable variable=VULKAN_SDK_VERSION]$SDK_VERSION"
          echo $SDK_VERSION > vulkan.version

    - task: Cache@2
      displayName: Cache Vulkan SDK
      inputs:
        key: 'vulkan_sdk4 | "$(Agent.OS)" | vulkan.version'
        path: $(VULKAN_CACHE_DIR)
        cacheHitVar: VULKAN_CACHE_RESTORED

    - task: PowerShell@2
      displayName: Build Vulkan loader if not cached
      inputs:
        targetType: "inline"
        script: |
          git clone https://github.com/KhronosGroup/Vulkan-Loader.git
          cd Vulkan-Loader
          git checkout tags/sdk-$(VULKAN_SDK_VERSION)
          mkdir build
          cd build
          python ../scripts/update_deps.py
          cmake -C helper.cmake -DCMAKE_INSTALL_PREFIX=$(VULKAN_CACHE_DIR) ..
          cmake --build . --config Release --target install
      continueOnError: false
      condition: ne(variables.VULKAN_CACHE_RESTORED, 'true')

    - task: PowerShell@2
      displayName: Copy Vulkan SDK
      inputs:
        targetType: "inline"
        script: Copy-Item $(Build.SourcesDirectory)/Vulkan-Loader/build/Vulkan-Headers/build/install/include -Destination $(VULKAN_CACHE_DIR)/include -Recurse
      continueOnError: false
      condition: ne(variables.VULKAN_CACHE_RESTORED, 'true')

    - task: PowerShell@2
      displayName: Setup Vulkan SDK
      inputs:
        targetType: "inline"
        script: |
          echo "##vso[task.setvariable variable=VULKAN_SDK]$(VULKAN_CACHE_DIR)"
          ls $(VULKAN_CACHE_DIR) -Recurse
    # End Vulkan setup tasks

    - task: Semmle@1
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      inputs:
        sourceCodeDirectory: '$(Build.SourcesDirectory)'
        language: 'cpp'
        buildCommandsString: 'python ./setup.py build -b build'
        querySuite: 'Recommended'
        timeout: '3600'
        ram: '32768'
        addProjectDirToScanningExclusionList: true
