schedules:
  - cron: "0 5 * * SUN"
    displayName: Weekly build
    branches:
      include:
        - main

trigger:
  tags:
    include:
    - "v*"

pool:
  vmImage: windows-latest

strategy:
  matrix:
    Python37:
      Python.Version: "3.7"
    Python38:
      Python.Version: "3.8"
    Python39:
      Python.Version: "3.9"
    Python310:
      Python.Version: "3.10"

variables:
  VULKAN_CACHE_DIR: $(Pipeline.Workspace)/.vulkansdk

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: $(Python.Version)
    addToPath: true
    architecture: "x64"

- task: UseDotNet@2
  displayName: 'Use .NET Core 2.1.x for ESRP Signing'
  inputs:
    packageType: sdk
    version: 2.1.x

- task: PowerShell@2
  displayName: Install prereqs for Windows
  inputs:
    ignoreLASTEXITCODE: true
    errorActionPreference: silentlyContinue
    targetType: "inline"
    script: |
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      conan remote add accera $env:CONAN_REMOTE
      conan user -p $env:CONAN_PWD -r accera $env:CONAN_USERNAME
  env:
    CONAN_PWD: $(CONAN_PWD)

- script: |
    git submodule init
    git submodule update
    call external\vcpkg\bootstrap-vcpkg.bat
    external\vcpkg\vcpkg.exe install catch2:x64-windows tomlplusplus:x64-windows
  displayName: Update vcpkg dependencies
  workingDirectory: "$(Build.SourcesDirectory)"

  # Begin Vulkan setup tasks
  # The Official Vulkan SDK setup requires elevation to install and cannot be run here. Instead we will build the Vulkan loader.
  # 1. Get the latest SDK version (https://vulkan.lunarg.com/content/view/latest-sdk-version-api)
  # 2. Build the Vulkan loader and headers if not present in the cache (https://github.com/KhronosGroup/Vulkan-Loader/blob/master/BUILD.md)
  # 3. Cache the Vulkan loader and headers using the version file as the hash
- task: PowerShell@2
  displayName: Get Vulkan SDK version
  inputs:
    targetType: "inline"
    script: |
      $SDK_VERSION=(curl https://vulkan.lunarg.com/sdk/latest/windows.txt -UseBasicParsing).Content
      echo Vulkan SDK version: $SDK_VERSION
      echo "##vso[task.setvariable variable=VULKAN_SDK_VERSION]$SDK_VERSION"
      echo $SDK_VERSION > vulkan.version

- task: Cache@2
  displayName: Cache Vulkan SDK
  inputs:
    key: 'vulkan_sdk4 | "$(Agent.OS)" | vulkan.version | "$(Python.Version)"'
    path: $(VULKAN_CACHE_DIR)
    cacheHitVar: VULKAN_CACHE_RESTORED
  continueOnError: true

- task: PowerShell@2
  displayName: Build Vulkan loader if not cached
  inputs:
    targetType: "inline"
    script: |
      git clone https://github.com/KhronosGroup/Vulkan-Loader.git
      cd Vulkan-Loader
      git checkout tags/sdk-$(VULKAN_SDK_VERSION)
      mkdir build
      cd build
      python ../scripts/update_deps.py
      cmake -C helper.cmake -DCMAKE_INSTALL_PREFIX=$(VULKAN_CACHE_DIR) ..
      cmake --build . --config Release --target install
  condition: ne(variables.VULKAN_CACHE_RESTORED, 'true')

- task: PowerShell@2
  displayName: Copy Vulkan SDK
  inputs:
    targetType: "inline"
    script: Copy-Item $(Build.SourcesDirectory)/Vulkan-Loader/build/Vulkan-Headers/build/install/include -Destination $(VULKAN_CACHE_DIR)/include -Recurse
  condition: ne(variables.VULKAN_CACHE_RESTORED, 'true')

- task: PowerShell@2
  displayName: Setup Vulkan SDK
  inputs:
    targetType: "inline"
    script: |
      echo "##vso[task.setvariable variable=VULKAN_SDK]$(VULKAN_CACHE_DIR)"
      ls $(VULKAN_CACHE_DIR) -Recurse
# End Vulkan setup tasks

# set ACCERA_PACKAGE_FOR_CI="1" so that the package version will increment for PyPI repositories
- bash: |
    echo "##vso[task.setvariable variable=ACCERA_PACKAGE_FOR_CI]1"
  displayName: Set ACCERA_PACKAGE_FOR_CI=1

- task: PythonScript@0
  displayName: python ./setup.py build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/setup.py"
    arguments: "build"
    workingDirectory: "$(Build.SourcesDirectory)/"

- task: PythonScript@0
  displayName: compilers python ./setup.py build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/compilers/setup.py"
    arguments: "build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/compilers"

- task: PythonScript@0
  displayName: gpu python ./setup.py build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/gpu/setup.py"
    arguments: "build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/gpu"

- task: PythonScript@0
  displayName: llvm python ./setup.py build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/llvm/setup.py"
    arguments: "build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/llvm"

- task: EsrpCodeSigning@1
  inputs:
    ConnectedServiceName: 'accera-python-code-signing1'
    FolderPath: '$(Build.SourcesDirectory)/build'
    Pattern: '_lang_python*.pyd, acc-opt.exe, acc-translate.exe, mlir-translate.exe, llc.exe, opt.exe, *vulkan*.dll'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
              {
                  "KeyCode" : "CP-231522",
                  "OperationCode" : "SigntoolSign",
                  "Parameters" : {
                      "OpusName" : "Microsoft",
                      "OpusInfo" : "http://www.microsoft.com",
                      "Append" : "/as",
                      "FileDigest" : "/fd \"SHA256\"",
                      "PageHash" : "/NPH",
                      "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  },
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-231522",
                  "OperationCode" : "SigntoolVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-231522",
                  "OperationCode" : "SigntoolSign",
                  "Parameters" : {
                      "OpusName" : "Microsoft",
                      "OpusInfo" : "http://www.microsoft.com",
                      "Append" : "/as",
                      "FileDigest" : "/fd \"SHA256\"",
                      "PageHash" : "/NPH",
                      "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                  },
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              },
              {
                  "KeyCode" : "CP-231522",
                  "OperationCode" : "SigntoolVerify",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- task: PythonScript@0
  displayName: python ./setup.py bdist_wheel -d build/dist --skip-build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/setup.py"
    arguments: "bdist_wheel -d build/dist --skip-build"
    workingDirectory: "$(Build.SourcesDirectory)/"

- task: PythonScript@0
  displayName: compilers python ./setup.py bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/compilers/setup.py"
    arguments: "bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/compilers"

- task: PythonScript@0
  displayName: gpu python ./setup.py bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/gpu/setup.py"
    arguments: "bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/gpu"

- task: PythonScript@0
  displayName: llvm python ./setup.py bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build
  inputs:
    scriptSource: "filePath"
    scriptPath: "$(Build.SourcesDirectory)/accera/python/llvm/setup.py"
    arguments: "bdist_wheel -d $(Build.SourcesDirectory)/build/dist --skip-build"
    workingDirectory: "$(Build.SourcesDirectory)/accera/python/llvm"

- task: PowerShell@2
  displayName: Install
  inputs:
    targetType: "inline"
    script: |
      $WHL = Get-ChildItem -Path build/dist -Filter "accera-*.whl" | %{$_.FullName}
      python -m pip install $WHL --find-links=build\dist --no-index
      $WHL = Get-ChildItem -Path build/dist -Filter "accera_gpu*.whl" | %{$_.FullName}
      python -m pip install $WHL
    workingDirectory: "$(Build.SourcesDirectory)/"

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
    set PATH=%VULKAN_SDK%\bin;%PATH%
    python -m accera.test.smoke_test
  displayName: Smoke test
  workingDirectory: "$(Build.SourcesDirectory)/"

- task: CopyFiles@2
  condition: always()
  inputs:
    SourceFolder: "$(Build.SourcesDirectory)/build/dist"
    Contents: |
      **/*
    TargetFolder: "$(Build.StagingDirectory)/python"
    CleanTargetFolder: true
    OverWrite: true
    preserveTimestamp: true

- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: "$(Build.StagingDirectory)"
    artifact: "Artifacts.$(Python.Version)"
    publishLocation: "pipeline"

- bash:
    python -m pip install twine keyring artifacts-keyring
  displayName: pip install twine tool for python package publishing

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: 'Accera'

- script: 'twine upload -r Accera --config-file $(PYPIRC_PATH) $(Build.SourcesDirectory)/build/dist/* --verbose --skip-existing'
  displayName: Upload the artifacts to Azure artifacts feed
