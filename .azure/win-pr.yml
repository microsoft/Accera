trigger: none

pool:
  vmImage: "windows-latest"

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.9" # TODO: switch to 3.10 once onnxruntime is released for it
      addToPath: true
      architecture: "x64"

  - task: PowerShell@2
    displayName: Install prereqs for Windows
    inputs:
      ignoreLASTEXITCODE: true
      errorActionPreference: silentlyContinue
      targetType: "inline"
      script: |
        python -m pip install -U pip
        python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
        conan remote add accera $(CONAN_REMOTE)
        conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
    continueOnError: false
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    env:
      CONAN_PWD: $(CONAN_PWD)

  - script: |
      git submodule init
      git submodule update
      call external\vcpkg\bootstrap-vcpkg.bat
      external\vcpkg\vcpkg.exe install catch2:x64-windows tomlplusplus:x64-windows
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  - task: CMake@1
    displayName: CMake configure on Windows
    continueOnError: false
    inputs:
      workingDirectory: 'build\RelWithDebInfo'
      cmakeArgs: '..\.. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_LIT_ARGS=-vv -G"Visual Studio 16 2019" -Ax64 -DLLVM_SETUP_VARIANT=$(LLVM_SETUP_VARIANT)'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - task: CMake@1
    displayName: CMake default build
    continueOnError: false
    inputs:
      workingDirectory: 'build\RelWithDebInfo'
      cmakeArgs: "--build . --config RelWithDebInfo"

  - task: CMake@1
    displayName: CMake build check-all
    inputs:
      workingDirectory: 'build\RelWithDebInfo'
      cmakeArgs: "--build . --config RelWithDebInfo --target check-all"

  - task: CMake@1
    displayName: CMake install build
    inputs:
      workingDirectory: 'build\RelWithDebInfo'
      cmakeArgs: "--build . --config RelWithDebInfo --target install"

  - task: PythonScript@0
    displayName: python ./setup.py build -b build -t build bdist_wheel -d build/dist
    inputs:
      scriptSource: "filePath"
      scriptPath: "$(Build.SourcesDirectory)/setup.py"
      arguments: "build -b build -t build bdist_wheel -d build/dist"
      workingDirectory: "$(Build.SourcesDirectory)/"

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      python -m pip install -r $(Build.SourcesDirectory)/accera/onnx-emitter/test/requirements.txt
      ctest -C RelWithDebInfo -T test -VV -LE benchmark
    displayName: Run all ctest targets
    workingDirectory: "$(Build.SourcesDirectory)/build/RelWithDebInfo"

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build/RelWithDebInfo"
      Contents: |
        **/*.mlir
      TargetFolder: "$(Build.StagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts"
      publishLocation: "pipeline"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'CTest'
      testResultsFiles: "**/Test*.xml"
      searchFolder: '$(Build.SourcesDirectory)/build/RelWithDebInfo'
