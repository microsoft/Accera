#map0 = affine_map<(d0, d1) -> (d0 * 512 + d1)>
#map1 = affine_map<()[s0] -> (s0)>
#map2 = affine_map<(d0, d1) -> (d0 * 128 + d1)>


#domain0 = #accln<"idomain{{i,0}={0:784:1}, {j,1}={0:512:1}, {k,2}={0:128:1}}">

#xdomain0 = #accln<"xfdomain{dims: {{i,0}, {j,1}, {k,2}}, indices: {{{i,0} : {0:784:1} = {(d0, d1) -> (d0 + d1), {{i_o,7}, {i_i,8}}}}, {{j,1} : {0:512:1} = {(d0, d1) -> (d0 + d1), {{j_o,3}, {j_i,4}}}}, {{k,2} : {0:128:1} = {(d0, d1) -> (d0 + d1), {{k_o,5}, {k_i,6}}}}, {{j_o,3} : {0:512:256}}, {{j_i,4} : {0:256:1} = {(d0, d1) -> (d0 + d1), {{j_i_o,13}, {j_i_i,14}}}}, {{k_o,5} : {0:128:128}}, {{k_i,6} : {0:128:1} = {(d0, d1) -> (d0 + d1), {{k_i_o,9}, {k_i_i,10}}}}, {{i_o,7} : {0:784:1}}, {{i_i,8} : {0:1:1} = {(d0, d1) -> (d0 + d1), {{i_i_o,11}, {i_i_i,12}}}}, {{k_i_o,9} : {0:128:4}}, {{k_i_i,10} : {0:4:1}}, {{i_i_o,11} : {0:1:6}}, {{i_i_i,12} : {0:6:1}}, {{j_i_o,13} : {0:256:16}}, {{j_i_i,14} : {0:16:1} = {(d0, d1) -> (d0 + d1), {{j_i_i_o,15}, {j_i_i_i,16}}}}, {{j_i_i_o,15} : {0:16:8}}, {{j_i_i_i,16} : {0:8:1}}}}">

module @optimized_matmul attributes {llvm.data_layout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"} {
  accv.module "optimized_matmul"  {
    accv.func @optimized_matmul_py_4a6286d9_impl_17630232307017152746(%arg0: memref<784x128xf32, #map2>, %arg1: memref<128x512xf32, #map0>, %arg2: memref<784x512xf32, #map0>) attributes {exec_target = 0 : i64, sym_visibility = "nested"} {
      "accln.nest"() ( {
        %0 = accln.sym_index {name = "i_o"} #accln<"index{i_o,7}"> loc(unknown)
        %1 = accln.sym_index {name = "j_i_i_i"} #accln<"index{j_i_i_i,16}"> loc(unknown)
        %2 = accln.sym_index {name = "j_i_i_o"} #accln<"index{j_i_i_o,15}"> loc(unknown)
        %3 = accln.sym_index {name = "i_i_i"} #accln<"index{i_i_i,12}"> loc(unknown)
        %4 = accln.sym_index {name = "k_i_i"} #accln<"index{k_i_i,10}"> loc(unknown)
        %5 = accln.sym_index {name = "i_i_o"} #accln<"index{i_i_o,11}"> loc(unknown)
        %6 = accln.sym_index {name = "k_i_o"} #accln<"index{k_i_o,9}"> loc(unknown)
        %7 = accln.sym_index {name = "j_i_o"} #accln<"index{j_i_o,13}"> loc(unknown)
        %8 = accln.sym_index {name = "i_o"} #accln<"index{i_o,7}"> loc(unknown)
        %9 = accln.sym_index {name = "k_o"} #accln<"index{k_o,5}"> loc(unknown)
        %10 = accln.sym_index {name = "j_o"} #accln<"index{j_o,3}"> loc(unknown)
        %11 = accln.sym_index {name = "k_o"} #accln<"index{k_o,5}"> loc(unknown)
        %12 = accln.sym_index {name = "j_i_i_i"} #accln<"index{j_i_i_i,16}"> loc(unknown)
        %13 = accln.sym_index {name = "j_i_i_o"} #accln<"index{j_i_i_o,15}"> loc(unknown)
        %14 = accln.sym_index {name = "i_i_i"} #accln<"index{i_i_i,12}"> loc(unknown)
        %15 = accln.sym_index {name = "k_i_i"} #accln<"index{k_i_i,10}"> loc(unknown)
        %16 = accln.sym_index {name = "i_i_o"} #accln<"index{i_i_o,11}"> loc(unknown)
        %17 = accln.sym_index {name = "k_i_o"} #accln<"index{k_i_o,9}"> loc(unknown)
        %18 = accln.sym_index {name = "j_i_o"} #accln<"index{j_i_o,13}"> loc(unknown)
        %19 = accln.sym_index {name = "i_o"} #accln<"index{i_o,7}"> loc(unknown)
        %20 = accln.sym_index {name = "k_o"} #accln<"index{k_o,5}"> loc(unknown)
        %21 = accln.sym_index {name = "j_o"} #accln<"index{j_o,3}"> loc(unknown)
        %22 = accln.sym_index {name = "j_i_i_i", reference = "j_i_i"} #accln<"index{j_i_i_i,16}"> loc(unknown)
        %23 = accln.sym_index {name = "j_i_i_o", reference = "j_i_i"} #accln<"index{j_i_i_o,15}"> loc(unknown)
        %24 = accln.sym_index {name = "j_i_i_i"} #accln<"index{j_i_i_i,16}"> loc(unknown)
        %25 = accln.sym_index {name = "j_i_i_o"} #accln<"index{j_i_i_o,15}"> loc(unknown)
        %26 = accln.sym_index {name = "j_i_i", reference = "j_i"} #accln<"index{j_i_i,14}"> loc(unknown)
        %27 = accln.sym_index {name = "j_i_o", reference = "j_i"} #accln<"index{j_i_o,13}"> loc(unknown)
        %28 = accln.sym_index {name = "j_i_i"} #accln<"index{j_i_i,14}"> loc(unknown)
        %29 = accln.sym_index {name = "j_i_o"} #accln<"index{j_i_o,13}"> loc(unknown)
        %30 = accln.sym_index {name = "i_i_i", reference = "i_i"} #accln<"index{i_i_i,12}"> loc(unknown)
        %31 = accln.sym_index {name = "i_i_o", reference = "i_i"} #accln<"index{i_i_o,11}"> loc(unknown)
        %32 = accln.sym_index {name = "i_i_i"} #accln<"index{i_i_i,12}"> loc(unknown)
        %33 = accln.sym_index {name = "i_i_o"} #accln<"index{i_i_o,11}"> loc(unknown)
        %34 = accln.sym_index {name = "k_i_i", reference = "k_i"} #accln<"index{k_i_i,10}"> loc(unknown)
        %35 = accln.sym_index {name = "k_i_o", reference = "k_i"} #accln<"index{k_i_o,9}"> loc(unknown)
        %36 = accln.sym_index {name = "k_i_i"} #accln<"index{k_i_i,10}"> loc(unknown)
        %37 = accln.sym_index {name = "k_i_o"} #accln<"index{k_i_o,9}"> loc(unknown)
        %38 = accln.sym_index {name = "i_i", reference = "i"} #accln<"index{i_i,8}"> loc(unknown)
        %39 = accln.sym_index {name = "i_o", reference = "i"} #accln<"index{i_o,7}"> loc(unknown)
        %40 = accln.sym_index {name = "i_i"} #accln<"index{i_i,8}"> loc(unknown)
        %41 = accln.sym_index {name = "i_o"} #accln<"index{i_o,7}"> loc(unknown)
        %42 = accln.sym_index {name = "k_i", reference = "k"} #accln<"index{k_i,6}"> loc(unknown)
        %43 = accln.sym_index {name = "k_o", reference = "k"} #accln<"index{k_o,5}"> loc(unknown)
        %44 = accln.sym_index {name = "k_i"} #accln<"index{k_i,6}"> loc(unknown)
        %45 = accln.sym_index {name = "k_o"} #accln<"index{k_o,5}"> loc(unknown)
        %46 = accln.sym_index {name = "j_i", reference = "j"} #accln<"index{j_i,4}"> loc(unknown)
        %47 = accln.sym_index {name = "j_o", reference = "j"} #accln<"index{j_o,3}"> loc(unknown)
        %48 = accln.sym_index {name = "j_i"} #accln<"index{j_i,4}"> loc(unknown)
        %49 = accln.sym_index {name = "j_o"} #accln<"index{j_o,3}"> loc(unknown)
        %50 = accln.sym_index {name = "i"} #accln<"index{i,0}"> loc(unknown)
        %51 = accln.sym_index {name = "j"} #accln<"index{j,1}"> loc(unknown)
        %52 = accln.sym_index {name = "k"} #accln<"index{k,2}"> loc(unknown)
        "accln.kernel"() ( {
          %58 = "accv.slice"(%arg2, %50, %51) {sliceDimensions = [0, 1]} : (memref<784x512xf32, #map0>, index, index) -> memref<f32, #map1> loc(unknown)
          %59 = "accv.slice"(%arg0, %50, %52) {sliceDimensions = [0, 1]} : (memref<784x128xf32, #map2>, index, index) -> memref<f32, #map1> loc(unknown)
          %60 = "accv.slice"(%arg1, %52, %51) {sliceDimensions = [0, 1]} : (memref<128x512xf32, #map0>, index, index) -> memref<f32, #map1> loc(unknown)
          %61 = "accv.get_element"(%59) : (memref<f32, #map1>) -> f32 loc(unknown)
          %62 = "accv.get_element"(%60) : (memref<f32, #map1>) -> f32 loc(unknown)
          %63 = "accv.bin_op"(%61, %62) {predicate = 2 : i64} : (f32, f32) -> f32 loc(unknown)
          %64 = "accv.get_element"(%58) : (memref<f32, #map1>) -> f32 loc(unknown)
          %65 = "accv.bin_op"(%64, %63) {predicate = 0 : i64} : (f32, f32) -> f32 loc(unknown)
          "accv.copy"(%65, %58) : (f32, memref<f32, #map1>) -> () loc(unknown)
          %66 = "accv.slice"(%arg2, %50, %51) {sliceDimensions = [0, 1]} : (memref<784x512xf32, #map0>, index, index) -> memref<f32, #map1> loc(unknown)
          %67 = "accv.get_element"(%58) : (memref<f32, #map1>) -> f32 loc(unknown)
          "accv.copy"(%67, %66) : (f32, memref<f32, #map1>) -> () loc(unknown)
          accln.terminator loc(unknown)
        }) {sym_name = "_"} : () -> () loc(unknown)
        %53 = "accln.null_pred"() : () -> i1 loc(unknown)
        "accln.scheduled_kernel"(%53) {kernel = @_, sym_name = "scheduled__"} : (i1) -> () loc(unknown)
        %54 = "accxp.make_cache"() {memorySpace = 0 : i64} : () -> memref<16x128x16xf32, 3> loc(unknown)
        %55 = "accxp.cache_region"(%arg1, %54, %21, %20) ( {
          accxp.cache_region_terminator loc(unknown)
        }) {cacheAccessIndexing = 0 : i64, cacheAccessMaps = {globalInputToLogicalCache = affine_map<(d0, d1, d2, d3) -> (d2 - d1, d3 - d0)>, globalInputToPhysicalCache = affine_map<(d0, d1, d2, d3) -> (((d3 - d0) floordiv 16) mod 16, (d2 - d1) mod 128, (d3 - d0) mod 16)>, logicalCacheToGlobalInput = affine_map<(d0, d1, d2, d3) -> (d2 + d1, d3 + d0)>, logicalCacheToPhysicalCache = affine_map<(d0, d1) -> ((d1 floordiv 16) mod 16, d0 mod 128, d1 mod 16)>}, cacheDimGlobalIndices = [#accln<"index{k,2}">, #accln<"index{j,1}">], cacheGlobalDimensionSizes = [128, 512], id = 0 : i64, injectionIndex = #accln<"index{k_o,5}">, inputAccessIndexing = 0 : i64, inputAccessMaps = {globalInputToPhysicalCache = affine_map<(d0, d1) -> (d0, d1)>}} : (memref<128x512xf32, #map0>, memref<16x128x16xf32, 3>, index, index) -> index loc(unknown)
        %56 = "accxp.make_cache"() {memorySpace = 0 : i64} : () -> memref<16x6x16xf32, 3> loc(unknown)
        %57 = "accxp.cache_region"(%arg2, %56, %10, %9, %8) ( {
          accxp.cache_region_terminator loc(unknown)
        }) {cacheAccessIndexing = 0 : i64, cacheAccessMaps = {globalInputToLogicalCache = affine_map<(d0, d1, d2, d3, d4) -> (d3 - d2, d4 - d0)>, globalInputToPhysicalCache = affine_map<(d0, d1, d2, d3, d4) -> (((d4 - d0) floordiv 16) mod 16, (d3 - d2) mod 6, (d4 - d0) mod 16)>, logicalCacheToGlobalInput = affine_map<(d0, d1, d2, d3, d4) -> (d3 + d2, d4 + d0)>, logicalCacheToPhysicalCache = affine_map<(d0, d1) -> ((d1 floordiv 16) mod 16, d0 mod 6, d1 mod 16)>}, cacheDimGlobalIndices = [#accln<"index{i,0}">, #accln<"index{j,1}">], cacheGlobalDimensionSizes = [784, 512], id = 1 : i64, injectionIndex = #accln<"index{i_o,7}">, inputAccessIndexing = 0 : i64, inputAccessMaps = {globalInputToPhysicalCache = affine_map<(d0, d1) -> (d0, d1)>}} : (memref<784x512xf32, #map0>, memref<16x6x16xf32, 3>, index, index, index) -> index loc(unknown)
        "accln.schedule"(%55, %57) ( {
          "accln.exec_plan"() {exec_target = 0 : i64} : () -> () loc(unknown)
          accln.terminator loc(unknown)
        }) {domain = #xdomain0, kernels = [@scheduled__], loopattrs = [{accxp_vectorizationInfo = #accxp<"vectorizationinfo{8,16,1}">, scheduledIndex = #accln<"index{j_i_i_i,16}">}], order = [#accln<"index{j_o,3}">, #accln<"index{k_o,5}">, #accln<"index{i_o,7}">, #accln<"index{j_i_o,13}">, #accln<"index{k_i_o,9}">, #accln<"index{i_i_o,11}">, #accln<"index{k_i_i,10}">, #accln<"index{i_i_i,12}">, #accln<"index{j_i_i_o,15}">, #accln<"index{j_i_i_i,16}">], parallel = [], unroll_and_jammed = {}, unrolled = [15 : index, 11 : index]} : (index, index) -> () loc(unknown)
        accln.terminator loc(unknown)
      }) {domain = #domain0, exec_target = 0 : i64, kernels = []} : () -> () loc(unknown)
      accv.return loc(unknown)
    } loc(unknown)
    accv.func @optimized_matmul_py_4a6286d9(%arg0: memref<784x128xf32, #map2>, %arg1: memref<128x512xf32, #map0>, %arg2: memref<784x512xf32, #map0>) attributes {exec_target = 0 : i64, accv.base_name = "optimized_matmul_py", accv.emit_header_decl, accv.emit_raw_pointer_api} {
      accv.launch_func @optimized_matmul_py_4a6286d9_impl_17630232307017152746(%arg0, %arg1, %arg2) {exec_target = 0 : i64} : (memref<784x128xf32, #map2>, memref<128x512xf32, #map0>, memref<784x512xf32, #map0>) -> () loc(unknown)
      accv.return loc(unknown)
    } loc(unknown)
  } loc(unknown)
} loc(unknown)
